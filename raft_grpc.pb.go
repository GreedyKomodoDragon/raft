// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: raft.proto

package raft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftGRPCClient is the client API for RaftGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftGRPCClient interface {
	RequestVotes(ctx context.Context, in *RequestVotesRequest, opts ...grpc.CallOption) (*RequestVotesResult, error)
	SendVote(ctx context.Context, in *SendVoteRequest, opts ...grpc.CallOption) (*SendVoteResult, error)
	CommitLog(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_CommitLogClient, error)
	AppendEntriesStream(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_AppendEntriesStreamClient, error)
	PipeEntries(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_PipeEntriesClient, error)
	HeartBeatStream(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_HeartBeatStreamClient, error)
}

type raftGRPCClient struct {
	cc grpc.ClientConnInterface
}

func newRaftGRPCClient(cc grpc.ClientConnInterface) RaftGRPCClient {
	return &raftGRPCClient{cc}
}

func (c *raftGRPCClient) RequestVotes(ctx context.Context, in *RequestVotesRequest, opts ...grpc.CallOption) (*RequestVotesResult, error) {
	out := new(RequestVotesResult)
	err := c.cc.Invoke(ctx, "/raft.RaftGRPC/RequestVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftGRPCClient) SendVote(ctx context.Context, in *SendVoteRequest, opts ...grpc.CallOption) (*SendVoteResult, error) {
	out := new(SendVoteResult)
	err := c.cc.Invoke(ctx, "/raft.RaftGRPC/SendVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftGRPCClient) CommitLog(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_CommitLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &raftGRPC_ServiceDesc.Streams[0], "/raft.RaftGRPC/CommitLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftGRPCCommitLogClient{stream}
	return x, nil
}

type RaftGRPC_CommitLogClient interface {
	Send(*CommitLogRequest) error
	Recv() (*CommitLogResult, error)
	grpc.ClientStream
}

type raftGRPCCommitLogClient struct {
	grpc.ClientStream
}

func (x *raftGRPCCommitLogClient) Send(m *CommitLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftGRPCCommitLogClient) Recv() (*CommitLogResult, error) {
	m := new(CommitLogResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftGRPCClient) AppendEntriesStream(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_AppendEntriesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &raftGRPC_ServiceDesc.Streams[1], "/raft.RaftGRPC/AppendEntriesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftGRPCAppendEntriesStreamClient{stream}
	return x, nil
}

type RaftGRPC_AppendEntriesStreamClient interface {
	Send(*AppendEntriesRequest) error
	Recv() (*AppendEntriesResult, error)
	grpc.ClientStream
}

type raftGRPCAppendEntriesStreamClient struct {
	grpc.ClientStream
}

func (x *raftGRPCAppendEntriesStreamClient) Send(m *AppendEntriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftGRPCAppendEntriesStreamClient) Recv() (*AppendEntriesResult, error) {
	m := new(AppendEntriesResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftGRPCClient) PipeEntries(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_PipeEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &raftGRPC_ServiceDesc.Streams[2], "/raft.RaftGRPC/PipeEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftGRPCPipeEntriesClient{stream}
	return x, nil
}

type RaftGRPC_PipeEntriesClient interface {
	Send(*PipeEntriesRequest) error
	Recv() (*PipeEntriesResponse, error)
	grpc.ClientStream
}

type raftGRPCPipeEntriesClient struct {
	grpc.ClientStream
}

func (x *raftGRPCPipeEntriesClient) Send(m *PipeEntriesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftGRPCPipeEntriesClient) Recv() (*PipeEntriesResponse, error) {
	m := new(PipeEntriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftGRPCClient) HeartBeatStream(ctx context.Context, opts ...grpc.CallOption) (RaftGRPC_HeartBeatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &raftGRPC_ServiceDesc.Streams[3], "/raft.RaftGRPC/HeartBeatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftGRPCHeartBeatStreamClient{stream}
	return x, nil
}

type RaftGRPC_HeartBeatStreamClient interface {
	Send(*HeartBeatRequest) error
	Recv() (*HeartBeatResult, error)
	grpc.ClientStream
}

type raftGRPCHeartBeatStreamClient struct {
	grpc.ClientStream
}

func (x *raftGRPCHeartBeatStreamClient) Send(m *HeartBeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftGRPCHeartBeatStreamClient) Recv() (*HeartBeatResult, error) {
	m := new(HeartBeatResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RaftGRPCServer is the server API for RaftGRPC service.
// All implementations should embed UnimplementedRaftGRPCServer
// for forward compatibility
type RaftGRPCServer interface {
	RequestVotes(context.Context, *RequestVotesRequest) (*RequestVotesResult, error)
	SendVote(context.Context, *SendVoteRequest) (*SendVoteResult, error)
	CommitLog(RaftGRPC_CommitLogServer) error
	AppendEntriesStream(RaftGRPC_AppendEntriesStreamServer) error
	PipeEntries(RaftGRPC_PipeEntriesServer) error
	HeartBeatStream(RaftGRPC_HeartBeatStreamServer) error
}

// UnimplementedRaftGRPCServer should be embedded to have forward compatible implementations.
type UnimplementedRaftGRPCServer struct {
}

func (UnimplementedRaftGRPCServer) RequestVotes(context.Context, *RequestVotesRequest) (*RequestVotesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVotes not implemented")
}
func (UnimplementedRaftGRPCServer) SendVote(context.Context, *SendVoteRequest) (*SendVoteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVote not implemented")
}
func (UnimplementedRaftGRPCServer) CommitLog(RaftGRPC_CommitLogServer) error {
	return status.Errorf(codes.Unimplemented, "method CommitLog not implemented")
}
func (UnimplementedRaftGRPCServer) AppendEntriesStream(RaftGRPC_AppendEntriesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendEntriesStream not implemented")
}
func (UnimplementedRaftGRPCServer) PipeEntries(RaftGRPC_PipeEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method PipeEntries not implemented")
}
func (UnimplementedRaftGRPCServer) HeartBeatStream(RaftGRPC_HeartBeatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HeartBeatStream not implemented")
}

// UnsafeRaftGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftGRPCServer will
// result in compilation errors.
type UnsafeRaftGRPCServer interface {
	mustEmbedUnimplementedRaftGRPCServer()
}

func RegisterRaftGRPCServer(s grpc.ServiceRegistrar, srv RaftGRPCServer) {
	s.RegisterService(&raftGRPC_ServiceDesc, srv)
}

func _RaftGRPC_RequestVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftGRPCServer).RequestVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftGRPC/RequestVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftGRPCServer).RequestVotes(ctx, req.(*RequestVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftGRPC_SendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftGRPCServer).SendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftGRPC/SendVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftGRPCServer).SendVote(ctx, req.(*SendVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftGRPC_CommitLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftGRPCServer).CommitLog(&raftGRPCCommitLogServer{stream})
}

type RaftGRPC_CommitLogServer interface {
	Send(*CommitLogResult) error
	Recv() (*CommitLogRequest, error)
	grpc.ServerStream
}

type raftGRPCCommitLogServer struct {
	grpc.ServerStream
}

func (x *raftGRPCCommitLogServer) Send(m *CommitLogResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftGRPCCommitLogServer) Recv() (*CommitLogRequest, error) {
	m := new(CommitLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftGRPC_AppendEntriesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftGRPCServer).AppendEntriesStream(&raftGRPCAppendEntriesStreamServer{stream})
}

type RaftGRPC_AppendEntriesStreamServer interface {
	Send(*AppendEntriesResult) error
	Recv() (*AppendEntriesRequest, error)
	grpc.ServerStream
}

type raftGRPCAppendEntriesStreamServer struct {
	grpc.ServerStream
}

func (x *raftGRPCAppendEntriesStreamServer) Send(m *AppendEntriesResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftGRPCAppendEntriesStreamServer) Recv() (*AppendEntriesRequest, error) {
	m := new(AppendEntriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftGRPC_PipeEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftGRPCServer).PipeEntries(&raftGRPCPipeEntriesServer{stream})
}

type RaftGRPC_PipeEntriesServer interface {
	Send(*PipeEntriesResponse) error
	Recv() (*PipeEntriesRequest, error)
	grpc.ServerStream
}

type raftGRPCPipeEntriesServer struct {
	grpc.ServerStream
}

func (x *raftGRPCPipeEntriesServer) Send(m *PipeEntriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftGRPCPipeEntriesServer) Recv() (*PipeEntriesRequest, error) {
	m := new(PipeEntriesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RaftGRPC_HeartBeatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftGRPCServer).HeartBeatStream(&raftGRPCHeartBeatStreamServer{stream})
}

type RaftGRPC_HeartBeatStreamServer interface {
	Send(*HeartBeatResult) error
	Recv() (*HeartBeatRequest, error)
	grpc.ServerStream
}

type raftGRPCHeartBeatStreamServer struct {
	grpc.ServerStream
}

func (x *raftGRPCHeartBeatStreamServer) Send(m *HeartBeatResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftGRPCHeartBeatStreamServer) Recv() (*HeartBeatRequest, error) {
	m := new(HeartBeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// raftGRPC_ServiceDesc is the grpc.ServiceDesc for RaftGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var raftGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftGRPC",
	HandlerType: (*RaftGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVotes",
			Handler:    _RaftGRPC_RequestVotes_Handler,
		},
		{
			MethodName: "SendVote",
			Handler:    _RaftGRPC_SendVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommitLog",
			Handler:       _RaftGRPC_CommitLog_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AppendEntriesStream",
			Handler:       _RaftGRPC_AppendEntriesStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PipeEntries",
			Handler:       _RaftGRPC_PipeEntries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HeartBeatStream",
			Handler:       _RaftGRPC_HeartBeatStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "raft.proto",
}
